# PIPELINE DEFINITION
# Name: diabetes-prediction-pipeline
# Description: Using kubeflow pipeline to train and evaluate a diabetes prediction model
# Outputs:
#    Output: str
components:
  comp-evaluate-model:
    executorLabel: exec-evaluate-model
    inputDefinitions:
      artifacts:
        model_path:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        x_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-load-data:
    executorLabel: exec-load-data
    outputDefinitions:
      artifacts:
        data_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    inputDefinitions:
      artifacts:
        data_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        x_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        x_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        x_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        train_model_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-evaluate-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - evaluate_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' 'xgboost==2.0.3' && \"$0\" \"$@\"\
          \n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef evaluate_model(model_path: Input[Artifact], x_test: Input[Artifact],\
          \ y_test: Input[Artifact]) -> str:\n    import pandas as pd\n    from sklearn.metrics\
          \ import accuracy_score\n    import joblib\n\n    model = joblib.load(filename=model_path.path)\n\
          \n    x_test_df = pd.read_csv(x_test.path)\n    y_test_df = pd.read_csv(y_test.path)\n\
          \n    y_pred = model.predict(x_test_df)\n    accuracy = accuracy_score(y_test_df,\
          \ y_pred)\n\n    return f'Test accuracy: {accuracy}'\n\n"
        image: python:3.9
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(data_output: Output[Artifact]):\n    import pandas\
          \ as pd\n\n    urls = [\n        \"https://raw.githubusercontent.com/daniel88516/diabetes-data/main/10k.csv\"\
          ,\n        \"https://raw.githubusercontent.com/s102401002/kubeflowPipeline/main/data1.csv\"\
          \n    ]\n\n    standard_name_mapping = {\n        'gender': ['gender', 'gen',\
          \ 'Gender', 'sex', 'Sex'],\n        'age': ['age', 'Age', 'AGE'],\n    \
          \    'bmi': ['bmi', 'BMI', 'Bmi'],\n        'HbA1c_level': ['HbA1c_level',\
          \ 'HbA1c', 'hba1c'],\n        'blood_glucose_level': ['blood_glucose_level',\
          \ 'glucose', 'BloodGlucose'],\n        'diabetes': ['diabetes', 'Diabetes']\n\
          \    }\n\n    datas = [] # download all the csv in urls as a array\n   \
          \ for url in urls:\n        df = pd.read_csv(url)\n        for standard_name,\
          \ variants in standard_name_mapping.items():\n            for variant in\
          \ variants:\n                if variant in df.columns:\n               \
          \     df.rename(columns={variant: standard_name}, inplace=True) # inplace=True:\
          \ changing directly instead of creating a new column\n                 \
          \   break\n\n        datas.append(df)\n\n    df_data = pd.concat(datas,\
          \ ignore_index=True)\n\n    df_data = df_data.drop(df_data[df_data['diabetes']\
          \ == 'No Info'].index)\n    df_data = df_data[['gender','age', 'bmi', 'HbA1c_level',\
          \ 'blood_glucose_level', 'diabetes']]\n    df_data = df_data.dropna(thresh=4)\n\
          \n    gender_map = {'Male': 0 , 'Female': 1  , 'Other': 2}\n    df_data['gender']\
          \ = df_data['gender'].map(gender_map)\n    df_data = df_data[df_data['gender']\
          \ != 2]\n    df_data['age'] = df_data['age'].replace('No Info', df_data['age'].mean())\n\
          \    df_data['bmi'] = df_data['bmi'].replace('No Info', df_data['bmi'].mean())\n\
          \    df_data['HbA1c_level'] = df_data['HbA1c_level'].replace('No Info',\
          \ df_data['HbA1c_level'].mean())\n    df_data['blood_glucose_level'] = df_data['blood_glucose_level'].replace('No\
          \ Info', df_data['blood_glucose_level'].mean())\n\n    df_data.to_csv(data_output.path)\n\
          \n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(\n    data_input: Input[Artifact], \n    x_train_output:\
          \ Output[Artifact], x_test_output: Output[Artifact],\n    y_train_output:\
          \ Output[Artifact], y_test_output: Output[Artifact]\n):\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split\n\n  \
          \  df_data = pd.read_csv(data_input.path)\n\n    x = df_data.drop(labels=['diabetes'],\
          \ axis=1)\n    y = df_data[['diabetes']]\n\n    x_train, x_test, y_train,\
          \ y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n  \
          \  x_train_df = pd.DataFrame(x_train)\n    x_test_df = pd.DataFrame(x_test)\n\
          \    y_train_df = pd.DataFrame(y_train)\n    y_test_df = pd.DataFrame(y_test)\n\
          \n    x_train_df.to_csv(x_train_output.path, index=False)\n    x_test_df.to_csv(x_test_output.path,\
          \ index=False)\n    y_train_df.to_csv(y_train_output.path, index=False)\n\
          \    y_test_df.to_csv(y_test_output.path, index=False)\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' 'xgboost==2.0.3' && \"$0\" \"$@\"\
          \n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(x_train: Input[Artifact], y_train: Input[Artifact],\
          \ train_model_output: Output[Artifact]):\n    import pandas as pd\n    from\
          \ xgboost import XGBClassifier\n    import joblib\n\n    x_train = pd.read_csv(x_train.path)\n\
          \    y_train = pd.read_csv(y_train.path)\n\n    model = XGBClassifier(random_state=0,\
          \ n_estimators=100)\n    model.fit(x_train, y_train.values.ravel())\n\n\
          \    joblib.dump(model, train_model_output.path)\n\n"
        image: python:3.9
pipelineInfo:
  description: Using kubeflow pipeline to train and evaluate a diabetes prediction
    model
  name: diabetes-prediction-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: evaluate-model
    tasks:
      evaluate-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-evaluate-model
        dependentTasks:
        - prepare-data
        - train-model
        inputs:
          artifacts:
            model_path:
              taskOutputArtifact:
                outputArtifactKey: train_model_output
                producerTask: train-model
            x_test:
              taskOutputArtifact:
                outputArtifactKey: x_test_output
                producerTask: prepare-data
            y_test:
              taskOutputArtifact:
                outputArtifactKey: y_test_output
                producerTask: prepare-data
        taskInfo:
          name: evaluate-model
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            data_input:
              taskOutputArtifact:
                outputArtifactKey: data_output
                producerTask: load-data
        taskInfo:
          name: prepare-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            x_train:
              taskOutputArtifact:
                outputArtifactKey: x_train_output
                producerTask: prepare-data
            y_train:
              taskOutputArtifact:
                outputArtifactKey: y_train_output
                producerTask: prepare-data
        taskInfo:
          name: train-model
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
