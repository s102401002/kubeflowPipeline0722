# PIPELINE DEFINITION
# Name: heartdisease-prediction-pipeline
# Description: Using Kubeflow pipeline to train and evaluate a HeartDisease prediction model
# Outputs:
#    Output: str
components:
  comp-load-data:
    executorLabel: exec-load-data
    outputDefinitions:
      artifacts:
        data_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    inputDefinitions:
      artifacts:
        data_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        X_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        X_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(data_output: Output[Artifact]):\n    import pandas\
          \ as pd\n\n    # \u8B80\u53D6\u8207\u7A0B\u5F0F\u78BC\u4F4D\u65BC\u540C\u4E00\
          \u500B\u8CC7\u6599\u593E\u4E2D\u7684 stroke.csv\n    # urls = [\n    # \
          \    \"https://raw.githubusercontent.com/s102401002/kubeflowPipeline0722/main/heart_2020_cleaned.csv\"\
          \n    # ]\n    df_data = pd.read_csv(\"https://raw.githubusercontent.com/s102401002/kubeflowPipeline0722/main/heart_2020_cleaned.csv\"\
          )\n    # \u79FB\u9664\u4E0D\u9700\u8981\u7684\u6B04\u4F4D\n    df_data =\
          \ df_data.drop(columns=['PhysicalHealth', 'MentalHealth', 'Race' , 'GenHealth'])\n\
          \n\n    # \u5B9A\u7FA9\u6620\u5C04\n    HeartDisease_map = {'Yes': 1, 'No':\
          \ 0}\n    Smoking_map = {'Yes': 1, 'No': 0}\n    AlcoholDrinking_map = {'Yes':\
          \ 1, 'No': 0}\n    Stroke_map = {'Yes': 1, 'No': 0}\n    DiffWalking_map\
          \ = {'Yes': 1, 'No': 0}\n    Sex_map = {'Male': 0, 'Female': 1}\n    AgeCategory_map\
          \ = {\n                        '0-4': 0,\n                        '5-9':\
          \ 1,\n                        '10-14': 2,\n                        '15-17':\
          \ 3,\n                        '18-24': 4,\n                        '25-29':\
          \ 5,\n                        '30-34': 6,\n                        '35-39':\
          \ 7,\n                        '40-44': 8,\n                        '45-49':\
          \ 9,\n                        '50-54': 10,\n                        '55-59':\
          \ 11,\n                        '60-64': 12,\n                        '65-69':\
          \ 13,\n                        '70-74': 14,\n                        '75-79':\
          \ 15,\n                        '80 or older': 16\n                    }\n\
          \    Diabetic_map = {'Yes (during pregnancy)':1 ,'Yes': 1, 'No': 0, 'No,\
          \ borderline diabetes':0 }\n    PhysicalActivity_map = {'Yes': 1, 'No':\
          \ 0}\n    Asthma_map = {'Yes': 1, 'No': 0}\n    KidneyDisease_map = {'Yes':\
          \ 1, 'No': 0}\n    SkinCancer_map = {'Yes': 1, 'No': 0} \n\n    # \u88DC\
          \u9F4A\u8CC7\u6599\n    df_data['HeartDisease'] = df_data['HeartDisease'].map(HeartDisease_map)\n\
          \    df_data['Smoking'] = df_data['Smoking'].map(Smoking_map) \n    df_data['AlcoholDrinking']\
          \ = df_data['AlcoholDrinking'].map(AlcoholDrinking_map) \n    df_data['Stroke']\
          \ = df_data['Stroke'].map(Stroke_map) \n    df_data['DiffWalking'] = df_data['DiffWalking'].map(DiffWalking_map)\
          \ \n    df_data['Sex'] = df_data['Sex'].map(Sex_map) \n    df_data['AgeCategory']\
          \ = df_data['AgeCategory'].map(AgeCategory_map) \n    df_data['Diabetic']\
          \ = df_data['Diabetic'].map(Diabetic_map) \n    df_data['PhysicalActivity']\
          \ = df_data['PhysicalActivity'].map(PhysicalActivity_map)\n    df_data['Asthma']\
          \ = df_data['Asthma'].map(Asthma_map) \n    df_data['KidneyDisease'] = df_data['KidneyDisease'].map(KidneyDisease_map)\
          \ \n    df_data['SkinCancer'] = df_data['SkinCancer'].map(SkinCancer_map)\
          \ \n\n    # \u5C07 'Sex' \u548C 'AgeCategory' \u6B04\u4F4D\u5206\u5225\u79FB\
          \u5230 DataFrame \u7684\u7B2C\u4E00\u548C\u7B2C\u4E8C\u6B04\n    columns_order\
          \ = ['Sex', 'AgeCategory'] + [col for col in df_data.columns if col not\
          \ in ['Sex', 'AgeCategory']]\n    df_data = df_data[columns_order]\n   \
          \ df_data.to_csv(data_output.path)\n\n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(\n    data_input: Input[Artifact], \n    X_train_output:\
          \ Output[Artifact], X_test_output: Output[Artifact],\n    Y_train_output:\
          \ Output[Artifact], Y_test_output: Output[Artifact],\n    X_val_output:\
          \ Output[Artifact], Y_val_output: Output[Artifact]\n):\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split\n\n  \
          \  df_data = pd.read_csv(data_input.path)\n\n    X = df_data.drop(labels=['HeartDisease'],\
          \ axis=1)\n    Y = df_data[['HeartDisease']]\n\n    X_train, X_test, Y_train,\
          \ Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n    X_test,\
          \ X_val, Y_test, Y_val = train_test_split(X_test, Y_test, test_size=0.5,\
          \ random_state=42)\n    X_train.to_csv(X_train_output.path, index=False)\n\
          \    X_test.to_csv(X_test_output.path, index=False)\n    Y_train.to_csv(Y_train_output.path,\
          \ index=False)\n    Y_test.to_csv(Y_test_output.path, index=False)\n   \
          \ X_val.to_csv(X_val_output.path, index=False)\n    Y_val.to_csv(Y_val_output.path,\
          \ index=False)\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' 'xgboost==2.0.3' && \"$0\" \"$@\"\
          \n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    X_train: Input[Artifact], \n    Y_train: Input[Artifact],\
          \ \n    X_test: Input[Artifact], \n    Y_test: Input[Artifact], \n    X_val:\
          \ Input[Artifact], \n    Y_val: Input[Artifact]\n) -> str:\n    import pandas\
          \ as pd\n    import xgboost as xgb\n    from sklearn.linear_model import\
          \ LogisticRegression\n    from sklearn.metrics import accuracy_score\n \
          \   import joblib\n\n    X_train = pd.read_csv(X_train.path)\n    Y_train\
          \ = pd.read_csv(Y_train.path)\n    X_test = pd.read_csv(X_test.path)\n \
          \   Y_test = pd.read_csv(Y_test.path)\n    X_val = pd.read_csv(X_val.path)\n\
          \    Y_val = pd.read_csv(Y_val.path)\n\n    # Logistic Regression\n    print('Logistic\
          \ Regression')\n    model = LogisticRegression(random_state=0, max_iter=10000)\n\
          \    model.fit(X_train, Y_train)\n    print('Training accuracy:', model.score(X_train,\
          \ Y_train))\n    lr_accuracy = model.score(X_test, Y_test)\n    print('Test\
          \ accuracy:', lr_accuracy)\n\n    # XGBoost\n    print('XGBoost')\n    def\
          \ xgboost_training():\n        dtrain = xgb.DMatrix(X_train, label=Y_train)\n\
          \        dval = xgb.DMatrix(X_val, label=Y_val)\n        dtest = xgb.DMatrix(X_test,\
          \ label=Y_test)\n\n        scale_pos_weight = len(Y_train[Y_train == 0])\
          \ / len(Y_train[Y_train == 1])\n        param = {\n            'max_depth':\
          \ 3,\n            'eta': 0.3,\n            'objective': 'binary:logistic',\n\
          \            'eval_metric': 'logloss',\n            'scale_pos_weight':\
          \ scale_pos_weight\n        }\n        evallist = [(dtrain, 'train'), (dval,\
          \ 'eval')]\n        num_round = 1000\n        model = xgb.train(param, dtrain,\
          \ num_round, evallist, early_stopping_rounds=10)\n        preds = model.predict(dtest)\n\
          \        predictions = [round(value) for value in preds]\n        global\
          \ xgb_accuracy \n        xgb_accuracy = accuracy_score(Y_test, predictions)\n\
          \        print('XGBoost Test accuracy:', xgb_accuracy)\n\n        return\
          \ model\n\n    xgb_model = xgboost_training()\n\n    # Save the model\n\
          \    # joblib.dump(xgb_model, model_output.path)\n    return f'Logistic\
          \ Regression accuracy: {lr_accuracy}, XGBoost accuracy: {xgb_accuracy}'\n\
          \n"
        image: python:3.9
pipelineInfo:
  description: Using Kubeflow pipeline to train and evaluate a HeartDisease prediction
    model
  name: heartdisease-prediction-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: train-model
    tasks:
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            data_input:
              taskOutputArtifact:
                outputArtifactKey: data_output
                producerTask: load-data
        taskInfo:
          name: prepare-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            X_test:
              taskOutputArtifact:
                outputArtifactKey: X_test_output
                producerTask: prepare-data
            X_train:
              taskOutputArtifact:
                outputArtifactKey: X_train_output
                producerTask: prepare-data
            X_val:
              taskOutputArtifact:
                outputArtifactKey: X_val_output
                producerTask: prepare-data
            Y_test:
              taskOutputArtifact:
                outputArtifactKey: Y_test_output
                producerTask: prepare-data
            Y_train:
              taskOutputArtifact:
                outputArtifactKey: Y_train_output
                producerTask: prepare-data
            Y_val:
              taskOutputArtifact:
                outputArtifactKey: Y_val_output
                producerTask: prepare-data
        taskInfo:
          name: train-model
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
