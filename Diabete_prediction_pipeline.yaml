# PIPELINE DEFINITION
# Name: diabete-prediction-pipeline
# Description: Using Kubeflow pipeline to train and evaluate a Diabete prediction model
components:
  comp-choose-model:
    executorLabel: exec-choose-model
    inputDefinitions:
      artifacts:
        KNN_model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        LogisticRegression_model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        RandomForest_model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        XGBoost_model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        knn_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        lr_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        rf_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        xgb_file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        final_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
        result:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-load-data:
    executorLabel: exec-load-data
    outputDefinitions:
      artifacts:
        data_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    inputDefinitions:
      artifacts:
        data_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        X_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model-knn:
    executorLabel: exec-train-model-knn
    inputDefinitions:
      artifacts:
        X_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model-logisticregression:
    executorLabel: exec-train-model-logisticregression
    inputDefinitions:
      artifacts:
        X_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model-randomforest:
    executorLabel: exec-train-model-randomforest
    inputDefinitions:
      artifacts:
        X_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model-xgboost:
    executorLabel: exec-train-model-xgboost
    inputDefinitions:
      artifacts:
        X_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        file:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        model:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
deploymentSpec:
  executors:
    exec-choose-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - choose_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'joblib==1.4.2'\
          \ 'scikit-learn==1.5.1' 'xgboost==2.0.3' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef choose_model(\n    LogisticRegression_model: Input[Artifact],\n\
          \    XGBoost_model: Input[Artifact],\n    # SVM_model: Input[Artifact],\n\
          \    RandomForest_model: Input[Artifact],\n    KNN_model: Input[Artifact],\n\
          \    lr_file: Input[Artifact],\n    xgb_file: Input[Artifact],\n    # svm_accuracy:\
          \ Input[Artifact],\n    rf_file: Input[Artifact],\n    knn_file: Input[Artifact],\n\
          \    final_model: Output[Model],\n    result: Output[Artifact]\n) -> None:\n\
          \    import joblib\n    import json\n\n    # Define a dictionary to store\
          \ model artifacts and their corresponding JSON files\n    models = {\n \
          \       'LogisticRegression': lr_file,\n        'XGBoost': xgb_file,\n \
          \       'RandomForest': rf_file,\n        'KNN': knn_file\n    }\n\n   \
          \ accuracy = {}\n    model_paths = {}\n\n    # Read accuracies and model\
          \ paths\n    for model_name, json_file in models.items():\n        with\
          \ open(json_file.path, 'r') as f:\n            data = json.load(f)\n   \
          \     accuracy[model_name] = data['accuracy']\n        model_paths[model_name]\
          \ = data['model_path']\n\n    # Find the best model\n    best_model_name\
          \ = max(accuracy, key=accuracy.get)\n    best_model = joblib.load(model_paths[best_model_name])\n\
          \n    # Save the best model\n    joblib.dump(best_model, final_model.path)\n\
          \n    # Prepare result string\n    result_string = f'Best Model is {best_model_name}\
          \ : {accuracy[best_model_name]}'\n    result_string += f'\\nAccuracy:\\\
          n'\n    for model_name, acc in accuracy.items():\n        result_string\
          \ += f'{model_name:17} : {acc}\\n'\n    print(result_string)\n\n    # Write\
          \ the result to a file\n    with open(result.path, 'w') as f:\n        f.write(result_string)\n\
          \n"
        image: python:3.9
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(data_output: Output[Artifact]):\n    import pandas\
          \ as pd\n\n    urls = [\n        \"https://raw.githubusercontent.com/daniel88516/diabetes-data/main/10k.csv\"\
          ,\n        \"https://raw.githubusercontent.com/s102401002/kubeflowPipeline/main/data1.csv\"\
          \n    ]\n\n    standard_name_mapping = {\n        'gender': ['gender', 'gen',\
          \ 'Gender', 'sex', 'Sex'],\n        'age': ['age', 'Age', 'AGE'],\n    \
          \    'bmi': ['bmi', 'BMI', 'Bmi'],\n        'HbA1c_level': ['HbA1c_level',\
          \ 'HbA1c', 'hba1c'],\n        'blood_glucose_level': ['blood_glucose_level',\
          \ 'glucose', 'BloodGlucose'],\n        'diabetes': ['diabetes', 'Diabetes']\n\
          \    }\n\n    datas = [] # download all the csv in urls as a array\n   \
          \ for url in urls:\n        df = pd.read_csv(url)\n        for standard_name,\
          \ variants in standard_name_mapping.items():\n            for variant in\
          \ variants:\n                if variant in df.columns:\n               \
          \     df.rename(columns={variant: standard_name}, inplace=True) # inplace=True:\
          \ changing directly instead of creating a new column\n                 \
          \   break\n\n        datas.append(df)\n\n    df_data = pd.concat(datas,\
          \ ignore_index=True)\n\n    df_data = df_data.drop(df_data[df_data['diabetes']\
          \ == 'No Info'].index)\n    df_data = df_data[['gender','age', 'bmi', 'HbA1c_level',\
          \ 'blood_glucose_level', 'diabetes']]\n    df_data = df_data.dropna(thresh=4)\n\
          \n    gender_map = {'Male': 0 , 'Female': 1  , 'Other': 2}\n    df_data['gender']\
          \ = df_data['gender'].map(gender_map)\n    df_data = df_data[df_data['gender']\
          \ != 2]\n    df_data['age'] = df_data['age'].replace('No Info', df_data['age'].mean())\n\
          \    df_data['bmi'] = df_data['bmi'].replace('No Info', df_data['bmi'].mean())\n\
          \    df_data['HbA1c_level'] = df_data['HbA1c_level'].replace('No Info',\
          \ df_data['HbA1c_level'].mean())\n    df_data['blood_glucose_level'] = df_data['blood_glucose_level'].replace('No\
          \ Info', df_data['blood_glucose_level'].mean())\n\n    df_data.to_csv(data_output.path)\n\
          \n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(\n    data_input: Input[Artifact], \n    X_train_output:\
          \ Output[Artifact], X_test_output: Output[Artifact],\n    Y_train_output:\
          \ Output[Artifact], Y_test_output: Output[Artifact],\n    X_val_output:\
          \ Output[Artifact], Y_val_output: Output[Artifact]\n):\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split\n\n  \
          \  df_data = pd.read_csv(data_input.path)\n\n    X = df_data.drop(labels=['diabetes'],\
          \ axis=1)\n    Y = df_data[['diabetes']]\n\n    X_train, X_test, Y_train,\
          \ Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n    X_test,\
          \ X_val, Y_test, Y_val = train_test_split(X_test, Y_test, test_size=0.5,\
          \ random_state=42)\n    X_train.to_csv(X_train_output.path, index=False)\n\
          \    X_test.to_csv(X_test_output.path, index=False)\n    Y_train.to_csv(Y_train_output.path,\
          \ index=False)\n    Y_test.to_csv(Y_test_output.path, index=False)\n   \
          \ X_val.to_csv(X_val_output.path, index=False)\n    Y_val.to_csv(Y_val_output.path,\
          \ index=False)\n\n"
        image: python:3.9
    exec-train-model-knn:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model_KNN
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model_KNN(\n    X_train: Input[Artifact], \n    Y_train:\
          \ Input[Artifact],\n    X_val: Input[Artifact], \n    Y_val: Input[Artifact],\n\
          \    X_test: Input[Artifact], \n    Y_test: Input[Artifact], \n    model:\
          \ Output[Artifact],\n    file: Output[Artifact]\n):\n    import pandas as\
          \ pd\n    from sklearn.neighbors import KNeighborsClassifier\n    import\
          \ joblib\n    import json\n\n    X_train = pd.read_csv(X_train.path)\n \
          \   Y_train = pd.read_csv(Y_train.path)\n    X_val = pd.read_csv(X_val.path)\n\
          \    Y_val = pd.read_csv(Y_val.path)\n    X_test = pd.read_csv(X_test.path)\n\
          \    Y_test = pd.read_csv(Y_test.path)\n\n    knc = KNeighborsClassifier(n_neighbors=3)\n\
          \    knc.fit(X_train,Y_train.values.ravel())\n    knn_accuracy = knc.score(X_test,Y_test)\n\
          \    # Save the model\n    joblib.dump(knc, model.path)\n\n     # Save the\
          \ accuracy\n    jsonFile = open(file.path,'w')\n    data = {}\n    data['accuracy']\
          \ = knn_accuracy\n    data['model_path'] = model.path\n    json.dump(data,\
          \ jsonFile, indent=2)\n\n"
        image: python:3.9
    exec-train-model-logisticregression:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model_LogisticRegression
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model_LogisticRegression(\n    X_train: Input[Artifact],\
          \ \n    Y_train: Input[Artifact], \n    X_val: Input[Artifact], \n    Y_val:\
          \ Input[Artifact],\n    X_test: Input[Artifact], \n    Y_test: Input[Artifact],\
          \ \n    model: Output[Artifact],\n    file: Output[Artifact]\n):\n    import\
          \ pandas as pd\n    from sklearn.linear_model import LogisticRegression\n\
          \    from sklearn.metrics import accuracy_score\n    import joblib\n   \
          \ import json\n\n    X_train = pd.read_csv(X_train.path)\n    Y_train =\
          \ pd.read_csv(Y_train.path)\n    X_val = pd.read_csv(X_val.path)\n    Y_val\
          \ = pd.read_csv(Y_val.path)\n    X_test = pd.read_csv(X_test.path)\n   \
          \ Y_test = pd.read_csv(Y_test.path)\n\n    # Logistic Regression\n    print('Logistic\
          \ Regression')\n    lr_model = LogisticRegression(random_state=0, max_iter=10000)\n\
          \    lr_model.fit(X_train, Y_train.values.ravel())\n    print('Training\
          \ accuracy:', lr_model.score(X_train, Y_train))\n    lr_accuracy = lr_model.score(X_test,\
          \ Y_test)\n    print('Test accuracy:', lr_accuracy)\n\n    # Save the model\n\
          \    joblib.dump(lr_model, model.path)\n    # Save the accuracy\n    jsonFile\
          \ = open(file.path,'w')\n    data = {}\n    data['accuracy'] = lr_accuracy\n\
          \    data['model_path'] = model.path\n    json.dump(data, jsonFile, indent=2)\n\
          \n"
        image: python:3.9
    exec-train-model-randomforest:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model_RandomForest
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model_RandomForest(\n    X_train: Input[Artifact], \n \
          \   Y_train: Input[Artifact],\n    X_val: Input[Artifact], \n    Y_val:\
          \ Input[Artifact],\n    X_test: Input[Artifact], \n    Y_test: Input[Artifact],\
          \ \n    model: Output[Artifact],\n    file: Output[Artifact]\n):\n    import\
          \ pandas as pd\n    from sklearn.metrics import accuracy_score\n    from\
          \ sklearn.ensemble import RandomForestClassifier\n    import joblib\n  \
          \  import json\n\n    X_train = pd.read_csv(X_train.path)\n    Y_train =\
          \ pd.read_csv(Y_train.path)\n    X_val = pd.read_csv(X_val.path)\n    Y_val\
          \ = pd.read_csv(Y_val.path)\n    X_test = pd.read_csv(X_test.path)\n   \
          \ Y_test = pd.read_csv(Y_test.path)\n\n    rfc=RandomForestClassifier(n_estimators=5)\n\
          \    rfc.fit(X_train,Y_train.values.ravel())    \n    y_predict=rfc.predict(X_test)\n\
          \    rfc.predict(X_test)\n    rf_accuracy = rfc.score(X_test,Y_test)\n \
          \   # Save the model\n    joblib.dump(rfc, model.path)\n\n     # Save the\
          \ accuracy\n    jsonFile = open(file.path,'w')\n    data = {}\n    data['accuracy']\
          \ = rf_accuracy\n    data['model_path'] = model.path\n    json.dump(data,\
          \ jsonFile, indent=2)\n\n"
        image: python:3.9
    exec-train-model-xgboost:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model_xgboost
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' 'xgboost==2.0.3' && \"$0\" \"$@\"\
          \n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model_xgboost(\n    X_train: Input[Artifact], \n    Y_train:\
          \ Input[Artifact],\n    X_val: Input[Artifact], \n    Y_val: Input[Artifact],\n\
          \    X_test: Input[Artifact], \n    Y_test: Input[Artifact], \n    model:\
          \ Output[Artifact],\n    file: Output[Artifact]\n):\n    import pandas as\
          \ pd\n    import xgboost as xgb\n    from sklearn.linear_model import LogisticRegression\n\
          \    from sklearn.metrics import accuracy_score\n    import joblib\n   \
          \ import json\n\n    X_train = pd.read_csv(X_train.path)\n    Y_train =\
          \ pd.read_csv(Y_train.path)\n    X_val = pd.read_csv(X_val.path)\n    Y_val\
          \ = pd.read_csv(Y_val.path)\n    X_test = pd.read_csv(X_test.path)\n   \
          \ Y_test = pd.read_csv(Y_test.path)\n\n    dtrain = xgb.DMatrix(X_train,\
          \ label=Y_train)\n    dval = xgb.DMatrix(X_val, label=Y_val)\n    dtest\
          \ = xgb.DMatrix(X_test, label=Y_test)\n\n    scale_pos_weight = len(Y_train[Y_train\
          \ == 0]) / len(Y_train[Y_train == 1])\n    param = {\n        'max_depth':\
          \ 3,\n        'eta': 0.3,\n        'objective': 'binary:logistic',\n   \
          \     'eval_metric': 'logloss',\n        'scale_pos_weight': scale_pos_weight\n\
          \    }\n    evallist = [(dtrain, 'train'), (dval, 'eval')]\n    num_round\
          \ = 1000\n    xgb_model = xgb.train(param, dtrain, num_round, evallist,\
          \ early_stopping_rounds=10)\n    preds = xgb_model.predict(dtest)\n    predictions\
          \ = [round(value) for value in preds]\n    global xgb_accuracy \n    xgb_accuracy\
          \ = accuracy_score(Y_test, predictions)\n    print('XGBoost Test accuracy:',\
          \ xgb_accuracy)\n\n    # Save the model\n    joblib.dump(xgb_model, model.path)\n\
          \n     # Save the accuracy\n    jsonFile = open(file.path,'w')\n    data\
          \ = {}\n    data['accuracy'] = xgb_accuracy\n    data['model_path'] = model.path\n\
          \    json.dump(data, jsonFile, indent=2)\n    # with open(accuracy.path,\
          \ 'w') as f:\n    #     f.write(str(xgb_accuracy))\n\n"
        image: python:3.9
pipelineInfo:
  description: Using Kubeflow pipeline to train and evaluate a Diabete prediction
    model
  name: diabete-prediction-pipeline
root:
  dag:
    tasks:
      choose-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-choose-model
        dependentTasks:
        - train-model-knn
        - train-model-logisticregression
        - train-model-randomforest
        - train-model-xgboost
        inputs:
          artifacts:
            KNN_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model-knn
            LogisticRegression_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model-logisticregression
            RandomForest_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model-randomforest
            XGBoost_model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-model-xgboost
            knn_file:
              taskOutputArtifact:
                outputArtifactKey: file
                producerTask: train-model-knn
            lr_file:
              taskOutputArtifact:
                outputArtifactKey: file
                producerTask: train-model-logisticregression
            rf_file:
              taskOutputArtifact:
                outputArtifactKey: file
                producerTask: train-model-randomforest
            xgb_file:
              taskOutputArtifact:
                outputArtifactKey: file
                producerTask: train-model-xgboost
        taskInfo:
          name: choose-model
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            data_input:
              taskOutputArtifact:
                outputArtifactKey: data_output
                producerTask: load-data
        taskInfo:
          name: prepare-data
      train-model-knn:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model-knn
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            X_test:
              taskOutputArtifact:
                outputArtifactKey: X_test_output
                producerTask: prepare-data
            X_train:
              taskOutputArtifact:
                outputArtifactKey: X_train_output
                producerTask: prepare-data
            X_val:
              taskOutputArtifact:
                outputArtifactKey: X_val_output
                producerTask: prepare-data
            Y_test:
              taskOutputArtifact:
                outputArtifactKey: Y_test_output
                producerTask: prepare-data
            Y_train:
              taskOutputArtifact:
                outputArtifactKey: Y_train_output
                producerTask: prepare-data
            Y_val:
              taskOutputArtifact:
                outputArtifactKey: Y_val_output
                producerTask: prepare-data
        taskInfo:
          name: train-model-knn
      train-model-logisticregression:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model-logisticregression
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            X_test:
              taskOutputArtifact:
                outputArtifactKey: X_test_output
                producerTask: prepare-data
            X_train:
              taskOutputArtifact:
                outputArtifactKey: X_train_output
                producerTask: prepare-data
            X_val:
              taskOutputArtifact:
                outputArtifactKey: X_val_output
                producerTask: prepare-data
            Y_test:
              taskOutputArtifact:
                outputArtifactKey: Y_test_output
                producerTask: prepare-data
            Y_train:
              taskOutputArtifact:
                outputArtifactKey: Y_train_output
                producerTask: prepare-data
            Y_val:
              taskOutputArtifact:
                outputArtifactKey: Y_val_output
                producerTask: prepare-data
        taskInfo:
          name: train-model-logisticregression
      train-model-randomforest:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model-randomforest
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            X_test:
              taskOutputArtifact:
                outputArtifactKey: X_test_output
                producerTask: prepare-data
            X_train:
              taskOutputArtifact:
                outputArtifactKey: X_train_output
                producerTask: prepare-data
            X_val:
              taskOutputArtifact:
                outputArtifactKey: X_val_output
                producerTask: prepare-data
            Y_test:
              taskOutputArtifact:
                outputArtifactKey: Y_test_output
                producerTask: prepare-data
            Y_train:
              taskOutputArtifact:
                outputArtifactKey: Y_train_output
                producerTask: prepare-data
            Y_val:
              taskOutputArtifact:
                outputArtifactKey: Y_val_output
                producerTask: prepare-data
        taskInfo:
          name: train-model-randomforest
      train-model-xgboost:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model-xgboost
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            X_test:
              taskOutputArtifact:
                outputArtifactKey: X_test_output
                producerTask: prepare-data
            X_train:
              taskOutputArtifact:
                outputArtifactKey: X_train_output
                producerTask: prepare-data
            X_val:
              taskOutputArtifact:
                outputArtifactKey: X_val_output
                producerTask: prepare-data
            Y_test:
              taskOutputArtifact:
                outputArtifactKey: Y_test_output
                producerTask: prepare-data
            Y_train:
              taskOutputArtifact:
                outputArtifactKey: Y_train_output
                producerTask: prepare-data
            Y_val:
              taskOutputArtifact:
                outputArtifactKey: Y_val_output
                producerTask: prepare-data
        taskInfo:
          name: train-model-xgboost
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
