# PIPELINE DEFINITION
# Name: hypertension-prediction-pipeline
# Description: Using Kubeflow pipeline to train and evaluate a Hypertension prediction model
# Outputs:
#    Output: str
components:
  comp-load-data:
    executorLabel: exec-load-data
    outputDefinitions:
      artifacts:
        data_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-prepare-data:
    executorLabel: exec-prepare-data
    inputDefinitions:
      artifacts:
        data_input:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        X_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val_output:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        X_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        X_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_test:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_train:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
        Y_val:
          artifactType:
            schemaTitle: system.Artifact
            schemaVersion: 0.0.1
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-load-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - load_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef load_data(data_output: Output[Artifact]):\n    import pandas\
          \ as pd\n\n    # \u8B80\u53D6\u8207\u7A0B\u5F0F\u78BC\u4F4D\u65BC\u540C\u4E00\
          \u500B\u8CC7\u6599\u593E\u4E2D\u7684 hypertension.csv\n    df_data = pd.read_csv('https://raw.githubusercontent.com/s102401002/kubeflowPipeline0722/main/hypertension_data.csv')\n\
          \n    # \u79FB\u9664\u4E0D\u9700\u8981\u7684\u6B04\u4F4D\n    df_data =\
          \ df_data.drop(columns=['cp','thal'])\n\n\n    # \u88DC\u9F4A\u8CC7\u6599\
          \n    df_data = df_data[(df_data['age'] != 'N/A') & (~df_data['age'].isna())]\n\
          \    df_data = df_data[(df_data['sex'] != 'N/A') & (~df_data['sex'].isna())]\n\
          \    df_data = df_data[(df_data['trestbps'] != 'N/A') & (~df_data['trestbps'].isna())]\
          \ #\u975C\u6B62\u8840\u58D3\n    df_data = df_data[(df_data['chol'] != 'N/A')\
          \ & (~df_data['chol'].isna())] #\u8840\u6E05\u81BD\u56FA\u9187\n    df_data\
          \ = df_data[(df_data['fbs'] != 'N/A') & (~df_data['fbs'].isna())] #\u662F\
          \u5426\u60A3\u8005\u7684\u7A7A\u8179\u8840\u7CD6 > 120\n    df_data = df_data[(df_data['restecg']\
          \ != 'N/A') & (~df_data['restecg'].isna())] #ST-T \u6CE2\u662F\u5426\u7570\
          \u5E38\n    df_data = df_data[df_data['restecg'] != 2]\n    df_data = df_data[(df_data['thalach']\
          \ != 'N/A') & (~df_data['thalach'].isna())] #\u6700\u5927\u5FC3\u7387\n\
          \    df_data = df_data[(df_data['exang'] != 'N/A') & (~df_data['exang'].isna())]\
          \ #\u662F\u5426\u904B\u52D5\u8A98\u767C\u5FC3\u7D5E\u75DB\n    df_data =\
          \ df_data[(df_data['oldpeak'] != 'N/A') & (~df_data['oldpeak'].isna())]\
          \ #\u904B\u52D5\u76F8\u5C0D\u65BC\u4F11\u606F\u5F15\u8D77\u7684 ST \u3002\
          \n    df_data = df_data[(df_data['slope'] != 'N/A') & (~df_data['slope'].isna())]\
          \ #\u904B\u52D5\u5CF0\u503C ST \u6BB5\u659C\u7387\uFF1A0\uFF1A\u4E0A\u5761\
          \ 1\uFF1A\u5E73\u5766 2\uFF1A\u4E0B\u5761\n    df_data = df_data[(df_data['ca']\
          \ != 'N/A') & (~df_data['ca'].isna())]#\u87A2\u5149\u6AA2\u67E5\u8457\u8272\
          \u7684\u4E3B\u8981\u8840\u7BA1\u6578\u91CF (0\u20134)\n    df_data = df_data[(df_data['target']\
          \ != 'N/A') & (~df_data['target'].isna())]\n    df_data.to_csv(data_output.path)\n\
          \n"
        image: python:3.9
    exec-prepare-data:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - prepare_data
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef prepare_data(\n    data_input: Input[Artifact], \n    X_train_output:\
          \ Output[Artifact], X_test_output: Output[Artifact],\n    Y_train_output:\
          \ Output[Artifact], Y_test_output: Output[Artifact],\n    X_val_output:\
          \ Output[Artifact], Y_val_output: Output[Artifact]\n):\n    import pandas\
          \ as pd\n    from sklearn.model_selection import train_test_split\n\n  \
          \  df_data = pd.read_csv(data_input.path)\n\n    X = df_data.drop(labels=['target'],\
          \ axis=1)\n    Y = df_data[['target']]\n\n    X_train, X_test, Y_train,\
          \ Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)\n    X_test,\
          \ X_val, Y_test, Y_val = train_test_split(X_test, Y_test, test_size=0.5,\
          \ random_state=42)\n    X_train.to_csv(X_train_output.path, index=False)\n\
          \    X_test.to_csv(X_test_output.path, index=False)\n    Y_train.to_csv(Y_train_output.path,\
          \ index=False)\n    Y_test.to_csv(Y_test_output.path, index=False)\n   \
          \ X_val.to_csv(X_val_output.path, index=False)\n    Y_val.to_csv(Y_val_output.path,\
          \ index=False)\n\n"
        image: python:3.9
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.8.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'joblib==1.4.2' 'xgboost==2.0.3' && \"$0\" \"$@\"\
          \n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(\n    X_train: Input[Artifact], \n    Y_train: Input[Artifact],\
          \ \n    X_test: Input[Artifact], \n    Y_test: Input[Artifact], \n    X_val:\
          \ Input[Artifact], \n    Y_val: Input[Artifact]\n) -> str:\n    import pandas\
          \ as pd\n    import xgboost as xgb\n    from sklearn.linear_model import\
          \ LogisticRegression\n    from sklearn.metrics import accuracy_score\n \
          \   import joblib\n\n    X_train = pd.read_csv(X_train.path)\n    Y_train\
          \ = pd.read_csv(Y_train.path)\n    X_test = pd.read_csv(X_test.path)\n \
          \   Y_test = pd.read_csv(Y_test.path)\n    X_val = pd.read_csv(X_val.path)\n\
          \    Y_val = pd.read_csv(Y_val.path)\n\n    #\u908F\u8F2F\u56DE\u6B78\n\
          \    print('Logistic Regression')\n    model = LogisticRegression(random_state=0,\
          \ max_iter=10000)\n    model.fit(X_train, Y_train)\n    print('Training\
          \ accuracy:', model.score(X_train, Y_train))\n    lr_accuracy = model.score(X_test,\
          \ Y_test)\n    print('Test accuracy:', lr_accuracy)\n\n    #XGBoost\n  \
          \  def XGBoost_training():\n        # \u5C07\u8CC7\u6599\u8F49\u63DB\u70BA\
          \ DMatrix \u683C\u5F0F\n        dtrain = xgb.DMatrix(X_train, label=Y_train)\n\
          \        dval = xgb.DMatrix(X_val, label=Y_val)\n        dtest = xgb.DMatrix(X_test,\
          \ label=Y_test)\n\n        # \u8A08\u7B97\u6B63\u6A23\u672C\u548C\u8CA0\u6A23\
          \u672C\u7684\u6BD4\u4F8B\n        scale_pos_weight = len(Y_train[Y_train\
          \ == 0]) / len(Y_train[Y_train == 1])#\u8CA0\u9664\u4EE5\u6B63\n       \
          \ # \u8A2D\u5B9A\u53C3\u6578\n        param = {\n            'max_depth':\
          \ 3,  # \u6A39\u7684\u6700\u5927\u6DF1\u5EA6\n            'eta': 0.3,  \
          \    # \u5B78\u7FD2\u7387\n            'objective': 'binary:logistic', \
          \ # \u76EE\u6A19\u51FD\u6578\uFF08\u4E8C\u5206\u985E\u554F\u984C\uFF09\n\
          \            'eval_metric': 'logloss',  # \u8A55\u4F30\u6307\u6A19\n   \
          \         'scale_pos_weight': scale_pos_weight  # \u52A0\u6B0A\u53C3\u6578\
          \n        }\n        # \u8A13\u7DF4\u6A21\u578B\n        evallist = [(dtrain,\
          \ 'train'), (dval, 'eval')]\n        num_round = 50 \n        Model  = xgb.train(param,\
          \ dtrain, num_round, evallist, early_stopping_rounds=10)#10\u6B21\u4E0D\u8B8A\
          \u5373\u505C\u6B62\n        preds = Model .predict(dtest)\n        predictions\
          \ = [round(value) for value in preds]\n        global xgb_accuracy \n  \
          \      xgb_accuracy = accuracy_score(Y_test, predictions)\n        print('XGBoost\
          \ Test accuracy:', xgb_accuracy)\n\n        return Model\n\n    Model =\
          \ XGBoost_training()#\u7528XGboost\u9032\u884C\u8A13\u7DF4\n    return f'Logistic\
          \ Regression accuracy: {lr_accuracy}, XGBoost accuracy: {xgb_accuracy}'\n\
          \n"
        image: python:3.9
pipelineInfo:
  description: Using Kubeflow pipeline to train and evaluate a Hypertension prediction
    model
  name: hypertension-prediction-pipeline
root:
  dag:
    outputs:
      parameters:
        Output:
          valueFromParameter:
            outputParameterKey: Output
            producerSubtask: train-model
    tasks:
      load-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-load-data
        taskInfo:
          name: load-data
      prepare-data:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-prepare-data
        dependentTasks:
        - load-data
        inputs:
          artifacts:
            data_input:
              taskOutputArtifact:
                outputArtifactKey: data_output
                producerTask: load-data
        taskInfo:
          name: prepare-data
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - prepare-data
        inputs:
          artifacts:
            X_test:
              taskOutputArtifact:
                outputArtifactKey: X_test_output
                producerTask: prepare-data
            X_train:
              taskOutputArtifact:
                outputArtifactKey: X_train_output
                producerTask: prepare-data
            X_val:
              taskOutputArtifact:
                outputArtifactKey: X_val_output
                producerTask: prepare-data
            Y_test:
              taskOutputArtifact:
                outputArtifactKey: Y_test_output
                producerTask: prepare-data
            Y_train:
              taskOutputArtifact:
                outputArtifactKey: Y_train_output
                producerTask: prepare-data
            Y_val:
              taskOutputArtifact:
                outputArtifactKey: Y_val_output
                producerTask: prepare-data
        taskInfo:
          name: train-model
  outputDefinitions:
    parameters:
      Output:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.8.0
